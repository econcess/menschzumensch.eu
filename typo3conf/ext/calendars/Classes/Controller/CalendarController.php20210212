<?php
namespace CodingMs\Calendars\Controller;

/***************************************************************
 *
 * Copyright notice
 *
 * (c) 2019 Thomas Deuling <typo3@coding.ms>
 *
 * All rights reserved
 *
 * This script is part of the TYPO3 project. The TYPO3 project is
 * free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * The GNU General Public License can be found at
 * http://www.gnu.org/copyleft/gpl.html.
 *
 * This script is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * This copyright notice MUST APPEAR in all copies of the script!
 ***************************************************************/

use CodingMs\Calendars\Domain\Repository\CalendarEventCategoryRepository;
use CodingMs\Calendars\Domain\Repository\CalendarEventRepository;
use TYPO3\CMS\Core\TypoScript\TypoScriptService;
use TYPO3\CMS\Core\Utility\GeneralUtility;
use TYPO3\CMS\Extbase\Mvc\Controller\ActionController;
use CodingMs\Calendars\Domain\Model\CalendarEvent;
use CodingMs\Calendars\Domain\Model\CalendarEventCategory;
use TYPO3\CMS\Core\Utility\ExtensionManagementUtility;
use CodingMs\AddressManager\Domain\Repository\AddressRepository;
use TYPO3\CMS\Extbase\Mvc\View\ViewInterface;
use TYPO3\CMS\Extbase\Configuration\ConfigurationManagerInterface;

/**
 * Controller for the calendar
 *
 * @package calendars
 * @license http://www.gnu.org/licenses/gpl.html GNU General Public License, version 3 or later
 *
 */
class CalendarController extends ActionController {

    /**
     * @var CalendarEventRepository
     */
    protected $calendarEventRepository;

    /**
     * @param CalendarEventRepository $calendarEventRepository
     */
    public function injectCalendarEventRepository(CalendarEventRepository $calendarEventRepository)
    {
        $this->calendarEventRepository = $calendarEventRepository;
    }

    /**
     * @var CalendarEventCategoryRepository
     */
    protected $calendarEventCategoryRepository;

    /**
     * @param CalendarEventCategoryRepository $calendarEventCategoryRepository
     */
    public function injectCalendarEventCategoryRepository(CalendarEventCategoryRepository $calendarEventCategoryRepository)
    {
        $this->calendarEventCategoryRepository = $calendarEventCategoryRepository;
    }

    /**
     * addressRepository
     *
     * @var \CodingMs\AddressManager\Domain\Repository\AddressRepository
     */
    /**
     * @var @todo address
     */
    protected $addressRepository;

    /**
     * Array with content element data
     * @var array
     */
    protected $content = [];


    /**
     * @var TypoScriptService
     */
    protected $typoScriptService;

    /**
     * @param TypoScriptService $typoScriptService
     */
    public function injectTypoScriptService(TypoScriptService $typoScriptService)
    {
        $this->typoScriptService = $typoScriptService;
    }

    /**
     * Initialize view
     * @param ViewInterface $view
     */
    public function initializeView(ViewInterface $view)
    {
        parent::initializeView($view);
        //
        // Get content data
        $this->content = $this->configurationManager->getContentObject()->data;
        $this->view->assign('content', $this->content);
        $this->settings['socialButtons'] = GeneralUtility::trimExplode(',', $this->settings['socialButtons'], true);
    }

    /**
     * Get a list with all events.
     *
     * @return void
     * @throws \TYPO3\CMS\Extbase\Mvc\Exception\NoSuchArgumentException
     */
    public function listEventsAction() {
        //
        // Get offset/limit from configuration
        $limit = (int)$this->settings['list']['limit'];
        $offset = (int)$this->settings['list']['offset'];
        // Overwrite limit with user setting
        if($this->request->hasArgument("limit")) {
            $limit = (int)$this->request->getArgument("limit");
        }
        //
        // Explode filter fields
        $this->settings['showFilter'] = false;
        if(trim($this->settings['filterFields']) != '') {
            $this->settings['showFilter'] = true;
            $this->settings['filterFields'] = GeneralUtility::trimExplode(',', $this->settings['filterFields'], true);
        }
        else {
            $this->settings['filterFields'] = [];
        }
        // Get allowed categories for filter function
        $allowedCategories = GeneralUtility::trimExplode(',', $this->settings['calendarEventCategoryUids'], true);
        $categorySelect = $this->calendarEventCategoryRepository->findAllByAllowedCategories($allowedCategories);
        // Identify the current selected category
        $category = null;
        if($this->request->hasArgument('categorySelect')) {
            $categoryUid = $this->request->getArgument('categorySelect');
            $category = $this->calendarEventCategoryRepository->findByIdentifier($categoryUid);
        }
        else if(in_array('Category', $this->settings['filterFields'])) {
            $category = $categorySelect->getFirst();
        }
        else {
            // If no category is selected and one or more categories in plugin are selected,
            // we need to pass the pre selected categories into the query,
            // in order to get only allowed events
            if(count($categorySelect) > 0) {
                // But only if there were items!
                $category = $categorySelect;
            }
        }
        //
        // Addresses in use?
        $address = null;
        if(ExtensionManagementUtility::isLoaded('address_manager')) {
            $addressRepository = $this->objectManager->get(AddressRepository::class);
            $addressSelect = $addressRepository->findAll();
            // Identify the current selected address
            if($this->request->hasArgument('addressSelect')) {
                $addressUid = $this->request->getArgument('addressSelect');
                $address = $this->addressRepository->findByIdentifier($addressUid);
            }
            else if(in_array('Address', $this->settings['filterFields'])) {
                $address = $addressSelect->getFirst();
            }
            $this->view->assign('address', $address);
            $this->view->assign('addressSelect', $addressSelect);
        }
        //
        // Get non overridden configuration
        $configurationType = ConfigurationManagerInterface::CONFIGURATION_TYPE_FULL_TYPOSCRIPT;
        $configuration = $this->configurationManager->getConfiguration($configurationType);
        $settings = $configuration['plugin.']['tx_calendars.']['settings.'];
        $settings = $this->typoScriptService->convertTypoScriptArrayToPlainArray($settings);
        // Get detail page uid
        if((int)$this->settings['detail']['pageUid'] === 0) {
            $this->settings['detail']['pageUid'] = (int)$settings['detail']['pageUid'];
        }
        //
        // Get all events by filter settings
        $events = $this->calendarEventRepository->findAllInFuture($category, $address, $offset, $limit);
        //
        $this->view->assign('limit', $limit);
        $this->view->assign('settings', $this->settings);
        $this->view->assign('events', $events);
        $this->view->assign('category', $category);
        $this->view->assign('categorySelect', $categorySelect);
    }

    /**
     * @param CalendarEvent $event
     */
    public function showEventAction(CalendarEvent $event) {
        $this->view->assign('event', $event);
        $this->view->assign('settings', $this->settings);
    }

    /**
     * Show full year
     *
     * @return void
     * @throws \TYPO3\CMS\Extbase\Mvc\Exception\NoSuchArgumentException
     */
    public function showFullYearAction() {
        // Get allowed categories for filter function
        $allowedCategories = GeneralUtility::trimExplode(',', $this->settings['calendarEventCategoryUids'], true);
        $categorySelect = $this->calendarEventCategoryRepository->findAllByAllowedCategories($allowedCategories);

        $this->view->assign('categories', $categorySelect);

        // Identify the current selected category
        $category = null;
        if($this->request->hasArgument('categorySelect')) {
            $categoryUid = $this->request->getArgument('categorySelect');
            $category = $this->calendarEventCategoryRepository->findByIdentifier($categoryUid);
        }
        // Addresses in use?
        $address = null;
        if(ExtensionManagementUtility::isLoaded('address_manager')) {
            $this->addressRepository = $this->objectManager->get(AddressRepository::class);
            $addressSelect = $this->addressRepository->findAll();
            // Identify the current selected address
            if ($this->request->hasArgument('addressSelect')) {
                $addressUid = $this->request->getArgument('addressSelect');
                $address = $this->addressRepository->findByIdentifier($addressUid);
            }
        }
        // Identify the current selected year
        $year = date("Y");
        if($this->request->hasArgument('yearSelect')) {
            $year = $this->request->getArgument('yearSelect');
        }
        // Get the first and last day of year (as timestamp)
        $firstDayOfYear = mktime(0, 0, 0, 1, 1, $year);
        $lastDayOfYear  = mktime(23, 59, 59, 12, 31, $year);

        // Get all events of year, category and address
        // sorted by start date
        $events = $this->calendarEventRepository->findAllByFilter($category, $address, $firstDayOfYear, $lastDayOfYear);


/*
        // Initialize empty week array
        $emptyWeekArray = array();
        for($i=1 ; $i<=7 ; $i++) {
            $emptyWeekArray[(string)$i] = array();
        }

        $yearData = array();

        // Dann alle Tage des Jahres durchlaufen
        // und die Daten sammeln
        for($dayTimestamp=$firstDayOfYear; $dayTimestamp<=$lastDayOfYear ; $dayTimestamp+=86400) {

            // Tagstart und End-Timestamp
            // Start-Datum mit mktime erstellen, wegen Sommer/Winterzeit!!
            $dayStartTimestamp = mktime(0, 0, 0, date('n', $dayTimestamp), date('j', $dayTimestamp), date('Y', $dayTimestamp));
            $dayEndTimestamp   = $dayStartTimestamp+86400-1;


            // Tag der Woche, 1 (für Montag) bis 7 (für Sonntag)
            $dayOfWeek = date('N', $dayTimestamp);


            // Number of the month -> we are using 0-11
            // because of easier access on array indexes
            $monthNo = date('n', $dayTimestamp);
            // Week of year
            $weekOfYear = date('W', $dayTimestamp);
            // If week index doesn't exist, initialize it
            if(!isset($yearData[$monthNo][$weekOfYear])) {
                $yearData[$monthNo][$weekOfYear] = $emptyWeekArray;
            }
            $yearData[$monthNo][$weekOfYear][$dayOfWeek]['dateString'] = date(DATE_RFC822, $dayTimestamp);
            $yearData[$monthNo][$weekOfYear][$dayOfWeek]['dayOfMonth'] = date('j', $dayTimestamp);
            $yearData[$monthNo][$weekOfYear][$dayOfWeek]['tooltip']    = array();
            $yearData[$monthNo][$weekOfYear][$dayOfWeek]['cssClass'] = '';


            / * * @var \CodingMs\Calendars\Domain\Model\CalendarEvent $event * /
            foreach($events as $event) {
                // Start-Timestamp of the event
                $eventStartTimestamp = -1;
                if($event->getStartDate() instanceof \DateTime) {
                    $eventStartTimestamp = $event->getStartDate()->getTimestamp();
                }
                // End-Timestamp of the event
                $eventEndTimestamp = -1;
                if($event->getEndDate() instanceof \DateTime) {
                    $eventEndTimestamp = $event->getEndDate()->getTimestamp();
                }
                // Day of event starting
                if($eventStartTimestamp==$dayStartTimestamp) {
                    $yearData[$monthNo][$weekOfYear][$dayOfWeek]['tooltip'][] = $this->createTooltip($event);
                    // If there are more than one events on a day, set a special CSS class
                    if(count($yearData[$monthNo][$weekOfYear][$dayOfWeek]['tooltip'])>1) {
                        $yearData[$monthNo][$weekOfYear][$dayOfWeek]['cssClass'] = 'one-event';
                    }
                    else {
                        $yearData[$monthNo][$weekOfYear][$dayOfWeek]['cssClass'] = 'multiple-events';
                    }
                }
                // Event period longer the a day
                // Normally start and end date is absolutely equal!
                else if($dayStartTimestamp>$eventStartTimestamp && $eventEndTimestamp>=$dayStartTimestamp) {
                    $yearData[$monthNo][$weekOfYear][$dayOfWeek]['tooltip'][] = $this->createTooltip($event);
                    // If there are more than one events on a day, set a special CSS class
                    if(count($yearData[$monthNo][$weekOfYear][$dayOfWeek]['tooltip'])>1) {
                        $yearData[$monthNo][$weekOfYear][$dayOfWeek]['cssClass'] = 'one-event';
                    }
                    else {
                        $yearData[$monthNo][$weekOfYear][$dayOfWeek]['cssClass'] = 'multiple-events';
                    }
                }
            }
            // Concatenate tooltips
            $tooltipText = "";
            if(!empty($yearData[$monthNo][$weekOfYear][$dayOfWeek]['tooltip'])) {
                $tooltipText = implode("<br />", $yearData[$monthNo][$weekOfYear][$dayOfWeek]['tooltip']);
                $tooltipText = '<ul>' . $tooltipText . '</ul>';
                $yearData[$monthNo][$weekOfYear][$dayOfWeek]['tooltipContent'] = $tooltipText;
                $tooltipText = " data-content=\"".$tooltipText."\" class=\"has-popover\" ";
            }
            $yearData[$monthNo][$weekOfYear][$dayOfWeek]['tooltip'] = $tooltipText;
        }
        // Collect all used years for the year select box
        $firstEventEver = $this->calendarEventRepository->findAllByFilter($category, $address, 0, 2145913200, 'ASC', 1);
        $lastEventEver = $this->calendarEventRepository->findAllByFilter($category, $address, 0, 2145913200, 'DESC', 1);
        $yearSelect = $this->getYearSelectBoxArray($year, $firstEventEver, $lastEventEver);
        // Explode filter fields
        $this->settings['showFilter'] = false;
        if(trim($this->settings['filterFields']) != '') {
            $this->settings['showFilter'] = true;
            $this->settings['filterFields'] = GeneralUtility::trimExplode(',', $this->settings['filterFields'], true);
        }
        //
        $this->view->assign('year', $year);
        $this->view->assign('yearData', $yearData);
        $this->view->assign('yearSelect', $yearSelect);
        $this->view->assign('category', $category);
        $this->view->assign('categorySelect', $categorySelect);
        $this->view->assign('address', $address);
        $this->view->assign('addressSelect', $addressSelect);
        */
        $this->view->assign('settings', $this->settings);
    }

    /**
     * @param int $year
     * @param CalendarEvent $firstEventEver
     * @param CalendarEvent $lastEventEver
     * @return array
     */
    protected function getYearSelectBoxArray($year, $firstEventEver, $lastEventEver): array {
        $yearSelect = array();
        $yearSelect[$year] = $year;
        if($firstEventEver instanceof CalendarEvent) {
            $yearFrom = date('Y', $firstEventEver->getStartDate()->getTimestamp());
            $yearTo   = date('Y', $lastEventEver->getStartDate()->getTimestamp());
            for($yearStart=$yearTo; $yearStart>=$yearFrom; $yearStart--) {
                $yearSelect[$yearStart] = $yearStart;
            }
        }
        // Sort years
        krsort($yearSelect);
        return $yearSelect;
    }

    /**
     * action show
     *
     * @return void
     */
    public function showMonthAction() {

        // Gruppe ermitteln
        $category = NULL;
        if($this->request->hasArgument('categorySelect')) {
            $categoryUid = $this->request->getArgument('categorySelect');
            $category = $this->calendarEventCategoryRepository->findByIdentifier($categoryUid);
        }

        // Gruppen fuer die Filterung
        $categorySelect = $this->calendarEventCategoryRepository->findAll();
        // Wenn keine Gruppe selektiert wurde,
        // nehme die erste
        if(!($category instanceof CalendarEventCategory)) {
            $category = $categorySelect->getFirst();
        }
        else {
            // die("else first");
        }

        // Get year (the selected or otherwise the current)
        $year = date("Y");
        if($this->request->hasArgument('year')) {
            $tempYear = (int)$this->request->getArgument('year');
            if($tempYear>0 && $tempYear<$year+10) {
                $year = $tempYear;
            }
        }


        // Monat ermitteln
        $month = (int)date("n");
        if($this->request->hasArgument('month')) {
            $tempMonth = (int)$this->request->getArgument('month');
            if($tempMonth>=1 && $tempMonth<=12) {
                $month = $tempMonth;
            }
        }

        // Erste und letzte Tag des Jahres als Timestamp
        $firstDayOfYear = mktime(0, 0, 0, $month, 1, $year);
        $lastDayOfYear  = mktime(23, 59, 59, $month, date("t", $firstDayOfYear), $year);

        // Params fuer next/previous month
        if($month==1) {
            $nextParams = array('month' => ($month+1), 'year' => $year);
            $previousParams = array('month' => 12, 'year' => ($year-1));
        }
        else if($month==12) {
            $nextParams = array('month' => 1, 'year' => ($year+1));
            $previousParams = array('month' => ($month-1), 'year' => $year);
        }
        else {
            $nextParams = array('month' => ($month+1), 'year' => $year);
            $previousParams = array('month' => ($month-1), 'year' => $year);
        }

        // Build uris for next and previous month
        /** @var \TYPO3\CMS\Extbase\Mvc\Web\Routing\UriBuilder */
        $uriBuilder = $this->controllerContext->getUriBuilder();
        $uriNextMonth = $uriBuilder->reset()
                          ->setCreateAbsoluteUri(true)
                          ->setUseCacheHash(false)
                          ->uriFor("showMonth", $nextParams, "Calendar"); // Don't forget uriFor!!
        $uriPreviousMonth = $uriBuilder->reset()
                          ->setCreateAbsoluteUri(true)
                          ->setUseCacheHash(false)
                          ->uriFor("showMonth", $previousParams, "Calendar"); // Don't forget uriFor!!

        // Als erstes nur alle Termine des Jahres & der Gruppe holen
        // Sortiert nach Start-Datum
        $events = $this->calendarEventRepository->findAllByFilter($category, NULL, $firstDayOfYear, $lastDayOfYear);


        // Initialize empty week array
        $emptyWeekArray = array();
        for($i=1 ; $i<=7 ; $i++) {
            $emptyWeekArray[(string)$i] = array();
        }


        // Dann alle Tage des Jahres durchlaufen
        // und die Daten sammeln
        $yearData = array();
        for($dayTimestamp=$firstDayOfYear; $dayTimestamp<=$lastDayOfYear ; $dayTimestamp+=86400) {

            // Tagstart und End-Timestamp
            // Start-Datum mit mktime erstellen, wegen Sommer/Winterzeit!!
            $dayStartTimestamp = mktime(0, 0, 0, date('n', $dayTimestamp), date('j', $dayTimestamp), date('Y', $dayTimestamp));
            $dayEndTimestamp   = $dayStartTimestamp+86400-1;


            // Tag der Woche, 1 (für Montag) bis 7 (für Sonntag)
            $dayOfWeek = date('N', $dayTimestamp);


            // Number of the month -> we are using 0-11
            // because of easier access on array indexes
            $monthNo = date('n', $dayTimestamp);
            // Week of year
            $weekOfYear = date('W', $dayTimestamp);
            // If week index doesn't exist, initialize it
            if(!isset($yearData[$monthNo][$weekOfYear])) {
                $yearData[$monthNo][$weekOfYear] = $emptyWeekArray;
            }
            $yearData[$monthNo][$weekOfYear][$dayOfWeek]['dateString'] = date(DATE_RFC822, $dayTimestamp);
            $yearData[$monthNo][$weekOfYear][$dayOfWeek]['dayOfMonth'] = date('j', $dayTimestamp);
            $yearData[$monthNo][$weekOfYear][$dayOfWeek]['tooltip']    = array();
            $yearData[$monthNo][$weekOfYear][$dayOfWeek]['cssClass'] = '';

            /** @var \CodingMs\Calendars\Domain\Model\CalendarEvent $event */
            foreach($events as $event) {
                // Start-Timestamp of the event
                $eventStartTimestamp = -1;
                if($event->getStartDate() instanceof \DateTime) {
                    $eventStartTimestamp = $event->getStartDate()->getTimestamp();
                }
                // End-Timestamp of the event
                $eventEndTimestamp = -1;
                if($event->getEndDate() instanceof \DateTime) {
                    $eventEndTimestamp = $event->getEndDate()->getTimestamp();
                }
                // Day of event starting
                if($eventStartTimestamp==$dayStartTimestamp) {
                    $yearData[$monthNo][$weekOfYear][$dayOfWeek]['tooltip'][] = $this->createTooltip($event);
                    // If there are more than one events on a day, set a special CSS class
                    if(count($yearData[$monthNo][$weekOfYear][$dayOfWeek]['tooltip'])>1) {
                        $yearData[$monthNo][$weekOfYear][$dayOfWeek]['cssClass'] = 'one-event';
                    }
                    else {
                        $yearData[$monthNo][$weekOfYear][$dayOfWeek]['cssClass'] = 'multiple-events';
                    }
                }
                // Event period longer the a day
                // Normally start and end date is absolutely equal!
                else if($dayStartTimestamp>$eventStartTimestamp && $eventEndTimestamp>=$dayStartTimestamp) {
                    $yearData[$monthNo][$weekOfYear][$dayOfWeek]['tooltip'][] = $this->createTooltip($event);
                    // If there are more than one events on a day, set a special CSS class
                    if(count($yearData[$monthNo][$weekOfYear][$dayOfWeek]['tooltip'])>1) {
                        $yearData[$monthNo][$weekOfYear][$dayOfWeek]['cssClass'] = 'one-event';
                    }
                    else {
                        $yearData[$monthNo][$weekOfYear][$dayOfWeek]['cssClass'] = 'multiple-events';
                    }
                }
            }
            // Concatenate tooltips
            $tooltipText = "";
            if(!empty($yearData[$monthNo][$weekOfYear][$dayOfWeek]['tooltip'])) {
                $tooltipText = implode("<br />", $yearData[$monthNo][$weekOfYear][$dayOfWeek]['tooltip']);
                $tooltipText = '<ul>' . $tooltipText . '</ul>';
                $yearData[$monthNo][$weekOfYear][$dayOfWeek]['tooltipContent'] = $tooltipText;
                $tooltipText = " data-content=\"".$tooltipText."\" class=\"has-popover\" ";
            }
            $yearData[$monthNo][$weekOfYear][$dayOfWeek]['tooltip'] = $tooltipText;
        }
        //
        $this->view->assign('uriNextMonth', $uriNextMonth);
        $this->view->assign('uriPreviousMonth', $uriPreviousMonth);
        $this->view->assign('year', $year);
        $this->view->assign('yearData', $yearData);
    }

    /**
     * Creates a tooltip for an event
     * @param \CodingMs\Calendars\Domain\Model\CalendarEvent $event Event
     * @return string Returns ths inner HTML of the tooltip
     */
    protected function createTooltip(CalendarEvent $event) {
        $html = '';

        // Wenn eine Detail-Seite angegeben
        // ist, setze einen Link
        $detailPid = $event->getDetailPid();
        if((int)$detailPid>0) {


            // Wenn eine Adresse angegeben ist, erweitere die Link-Parameter
            if(ExtensionManagementUtility::isLoaded("address_manager")) {
                /**
                 * @todo: diese condition kann weg,
                 *      aber muss nicht abgefragt werden, ob eine Adresse gesetzt ist?!
                 */


                // URI fuer die Links
                /** @var \TYPO3\CMS\Extbase\Mvc\Web\Routing\UriBuilder */
                $uriBuilder    = $this->controllerContext->getUriBuilder();
                $anchorMenuUri = $uriBuilder->reset()->setCreateAbsoluteUri(true)->setTargetPageUid($detailPid)
                                 ->setArguments(array())
                                 ->uriFor("show", array('address' => $event->getAddress()), 'AddressList', 'AddressManager', 'Addresslist'); // uriFor darf nicht vergessen werden!!
            }
            else {
                // URI fuer die Links
                /** @var \TYPO3\CMS\Extbase\Mvc\Web\Routing\UriBuilder */
                $uriBuilder    = $this->controllerContext->getUriBuilder();
                $anchorMenuUri = $uriBuilder->reset()->setCreateAbsoluteUri(true)->setTargetPageUid($detailPid)
                                 ->setArguments(array())
                                 ->uriFor("", array()); // uriFor darf nicht vergessen werden!!
            }
            $html = "<a href='".$anchorMenuUri."'>".$event->getTitle()."</a>";
        }

        else {
            $html = $event->getTitle();
        }

        // Insert registration link
        if((int)$this->settings['registration']['pageUid']>0) {
            /** @var \TYPO3\CMS\Extbase\Mvc\Web\Routing\UriBuilder */
            $uriBuilder    = $this->controllerContext->getUriBuilder();
            $registrationUri = $uriBuilder->reset()->setCreateAbsoluteUri(true)->setTargetPageUid($this->settings['registration']['pid'])
                ->setArguments(array())
                ->uriFor("showRegistration", array('event' => $event), 'Registration', 'Calendars', 'Registration'); // uriFor darf nicht vergessen werden!!
            $html .= "<a href='" . $registrationUri . "' class='btn btn-success btn-xs pull-right'>anmelden</a>";
        }


        return '<li>' . $html . '</li>';
    }

}
